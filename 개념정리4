☞input()
-사용자로부터 직접 데이터를 입력받는 기능. 입력된 값의 기본 타입은 str.
-이 기능을 이용하면 실행 시 입력창이 뜨고, 값을 입력해야 다음 줄을 출력한다.
-입력받은 값을 다른 자료형으로 바꿀 때 a=바꿀 자료형(input(‘ ’))으로 써도 됨.
(굳이 다른 줄에 쓰지 않아도 된다는 말임)
- input 기능을 이용해서 나오는 값의 타입은 str!!

~입력받은 값 dictionary로 저장하기~
-나이를 입력받기 위해 input함수를 쓰고 age라는 변수에 대입한다. dictionary로 저장하고 출력하기 위해 d라는 변수에 key값으로는 ‘나이’를, value값으로는 입력받은 나이를 대입한 변수 age를 넣는다. (위 과정은 이름도 동일함.)
이러면 dictionary형태로 d라는 변수에 저장 완료^^ 출력하기를 누르면 나이와 이름을 입력하라고 창이 뜨고, 모든 입력을 마치면 맨 밑줄처럼 출력된다...(값을 입력하기 전까지 코드 실행 안 됨.)


☞import
-모듈을 사용할 수 있도록 해주는 것.
-모듈은 뭔가를 실행할 수 있는 코드가 든 파일이라고 생각하면 편함.
- math 모듈에서 pi(변수) 가져오기 예시
->print(math.pi) 라고 쓰지 않고 그냥 math.pi라고만 써도 같은 값이 나오긴 함. (math 모듈에서 pi(변수)만 가져올거야~)

-sys.path는 모듈을 찾는 경로를 나타내는 리스트.
원하는 경로를 추가하여 해당 경로에서 모듈을 불러올 수 있다.
- sys.path 함수 활용 예시.


☞산술 연산자
①/: 진짜 나누기(몫, 나머지 모두) ②%: 나머지 ③//: 몫 ④**: x의 y제곱


☞비교 연산자
-출력하면 이 식이 맞는지 안 맞는지를 판별해서 True값이나 False값이 나옴.
①!=: 같지 않다. ②>,<: 초과, 미만 ③‘>’,‘<’에 ‘=’가 붙으면 각각 이상, 이하의 의미.


☞논리 연산자
①and: 둘 다 해당해야 True. ②or: 둘 중에 하나만 해당해도 True.
③not: 반대로 출력함.


☞비트 연산자
①&: 둘 다 1이어야 함. ②|: 둘 중에 하나만 1이어도 됨. ③~: 싹 다 반대로.
④^: 둘이 다를 때 1, 같을 때 0. ⑤>>: 오른쪽으로 두 칸. ⑥<<: 왼쪽으로 두 칸.


☞대입 연산자
-같은 변수를 알아서 한 번 더 써주는 연산자.


☞항등 연산자
-두 개의 값(또는 변수)이 메모리의 동일한 부분(같은 주소)에 있는지 확인할 수 있도록 하는 연산자.
-두 변수가 동일하다고 해서 이들이 동일하다는 의미는 아님!

-맨 마지막에 있는 print(x3 is y3)은 왜 False일까?
[1, 2, 3]은 List. 리스트는 자료구조. 문자열이나 숫자 등 간단한 자료형과는 달리 리스트는 겉으로 보기에 갖는 값이 같다고 해도 각각 다른 메모리 주소를 가짐. 그렇기 때문에 False.


☞Name(identifier)
-객체에 부여된 이름. 변수를 의미.
변수에 값을 대입하면 사실상 그 값의 메모리 주소가 변수에 대입되는 것.
->a에 2라는 값의 메모리 주소를 대입. a에 +1을 하니 새로운 값인 3이 생기고, a에는 3의 메모리 주소 값이 새롭게 대입된다. b에 2를 대입하면 이미 기록되어 있었던 2의 메모리 주소가 b에 대입된다.


☞Namespace
-변수의 적용 범위를 구분하여 사용.
-Function(local, 지역변수)<module(global, 전역변수)<bulit-in namespace
-지역변수는 특정 함수 내에서만 존재하고 사라짐.
-전역변수는 어디에서나 참조할 수 있다!

-함수는 호출하기 전까지 실행하지 않음.


☞if
-조건을 만족하는 경우에만 실행.
-그냥 if만 써서 실행시키면 조건 만족 시 원하는 값을 출력, 아니면 아무것도 안 나옴.
-if..else는 조건을 만족할 때와 아닌 경우를 구분해서 실행하는 내용이 달라짐.
-if..elif..else는 조건 만족 여부에 우선순위를 두고 실행 내용이 달라짐.

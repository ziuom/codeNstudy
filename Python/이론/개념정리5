☞Nested if..elif..else 중첩 조건문
-조건 구문 내부에 다른 조건 구문을 둘 수 있다.
-조건이 많은 경우에 중첩 조건문을 쓰기 때문에 우선순위만 잘 정한다면 실행 횟수를 줄일 수 있어서 효율적임.
- if 안에 if가 있는 중첩 조건문.
- if..elif..else 조건문으로 바꿀 수도 있음!
-조건을 적을 때 많을 것 같은 경우를 조건에 다는 게 유리함!


☞for loop 반복문
-for 변수(아이템) in 순서형 자료(자료구조) 형식으로 쓴다.


☞for loop+range()
-range() : 숫자의 시퀀스를 생성하는 기능 제공.
-range(start, stop, step_size)이 기본형.
-start와 step_size는 생략하면 디폴트 값이 0임.
-몇 번 반복 해야 하는지 정확하게 알 수 있을 때 많이 사용함.
- print(range(10))를 입력하면 range(0, 10)값이 출력된다.
- range(10)을 list형식으로 쭉 뽑아낸 것.


☞while loop, while loop+else
-조건을 만족하면 실행하고 만족하지 않으면 조건문을 빠져나옴.


☞break, continue
-break는 반복 루프를 종료. 루프 바로 다음의 명령문으로 실행의 흐름을 변경한다.
-continue는 현재 반복의 나머지 코드를 건너뛰어 루프를 진행한다.
󰠌list인 a에서 d를 하나 뽑아낼건데 d의 값이 3이 되면 break.
1, 2까지 순서대로 넣어서 출력한 뒤, 3이 되자마자 break해서 for문을 나옴.
󰠌continue는 break랑 다르게 그 숫자가 왔다고 해서 멈추는게 아니라 그냥 단순히 그 숫자를 제외하고 나머지는 계속 실행함. 예시에서도 그렇듯 d값이 3이 되는 순간만 제외하고 나머지 숫자들은 계속해서 출력 해내고 있음.


󰠌for 루프는 문자열 “string“의 각 문자를 반복함. 루프 내부에서는 변수인 val의 값이 “i“와 같은지 확인하며 계속 반복한다. val이 ”i“라면 그 값(i)을 출력한다.
(출력하지 않아도 어쨌든 계속 val과 string 안의 문자를 비교하고 있음.)
루프가 끝나면 “The end“값을 출력한다.


☞pass
-빈 명령문. 인터프리터가 이 명령문을 무시하진 않지만 그렇다고 작업을 하진 않음.
(주석은 인터프리터가 그 자체를 무시함.)

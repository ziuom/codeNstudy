☞코딩의 3대 조건
-하드웨어 : 코드가 실제로 동작하도록 하는 환경.
-소프트웨어 : 코드가 동작할 수 있게 만들어 주는(도와주는?) 환경
-프로그래머 : 코드를 직접 작성하는 사람.

☞디스크
-비휘발성/휘발성의 기준은 ‘전원이 꺼졌을 때에도 특정 정보를 저장하고 있는지 아닌지의 차이.
-휘발성이라면 ’램‘	-비휘발성이라면 ’하드디스크‘

☞파이썬의 특징 3가지
①인터프리터 언어	②동적 타입 언어		③플랫폼 독립적 언어

☞변수 선언 시 주의 사항
①대소문자 구분.	②띄어쓰기가 필요하다면 _를 사용.
③명료하되 의미를 알아볼 수 있도록!

☞들여쓰기 하나로 출력되는 값이 아예 달라질 수 있으므로 주의해야 함!
☞#를 사용하여 주석처리가 가능하고 “”“ ”“”을 이용하면 다중 주석처리가 가능함.
☞Docstrings
-함수, 메소드, 클래스, 모듈의 정의 이후에 사용하는 문자열 리터럴.

☞변수(Variables)
-메모리에 데이터를 저장하기 위해 사용되는 지정된 위치.
-변수에 데이터/값을 할당하기 위해 = 기호 사용.
-동적 타입 언어이기 때문에 변수의 자료형을 굳이 선언 해주지 않아도 알아서 구분함.
->다른 언어에서는 같은 변수에 다른 자료형의 값을 할당하려고 하면 에러가 남;;
->여러 개의 변수와 값을 한 줄에 적어 대입하는 것도 가능하다.

☞상수(Constants)
-변수와 반대되는 개념. 고정된 값을 가지며, 값을 다르게 할당 해줄 수 없음.
-파이썬에서 상수를 사용할 수 없긴 하지만 새 파일을 만들고 거기에 상수로 쓰고 싶은 변수를 만들고 값을 할당한 후, 원래 쓰던 파일에서 그 파일을 불러오면 사용할 수는 있음.
->상당히 억지로 상수를 이용하는 방법. 상수용으로 만든 파일 자체에서 변수는 그냥 정말 ‘변수’ 그 자체지만 새로운 파일에서 다른 파일을 불러오는 경우에는 그 안에 있는 변수의 값을 변경할 수 없으므로 상수처럼 활용할 수 있는 것임.

☞리터럴(Literal)
-변수 또는 상수에 주어지는 원시 데이터. 보통 대입되는 값을 말한다.
-숫자(int, float 등), 문자열(string), 논리형(boolen) 등 다양한 자료형을 가지는 값.
-논리형에서 1은 True를 의미, 0은 False를 의미한다.
-None : 생성되지 않았음을 지정.
-리터럴의 모음(자료구조)에는 List, Tuple, Dict(dictionary), Set 등이 있다.
- 컴퓨터 입장에서는 1은 숫자가 아니라 True로도 해석 가능.
->x = (1 == True)에서 True가 True와 값이 같냐고 물어봤기 때문에 당연히 True 값 출력.

 
multiline_str 줄에서 “”“ ”“”이 우리 눈엔 다중 처리된 것처럼 보이지만 그 앞에 변수(multiline_str)와 대입 연산자(=)를 쓰면 여러 줄로 문자열 값을 변수에 대입하는 것으로 해석됨.
-마지막 코드에서 원래는 “raw \n string” 앞에 r을 하나 더 써줬었음. (왼쪽 사진)
근데 그렇게 쓰니까 \n을 줄바꿈 기호로 인식하지 않고 그냥 문자로 인식해서 다음 줄로 안 바뀌고 문자열이 그대로 출력됨..
→r을 지우니까 다음 줄로 잘 넘어가지더라~

☞a=[1, “abc”, [1, 2, 3]] 인 경우처럼 자료구조 자체가 자료구조 안에 들어가는 경우가 있다. 이럴 때 [1, 2, 3] 자료구조의 2를 뽑아내고 싶다면 a[2][1]을 쓰면 된다.


☞Tuple 안에 있는 값들은 선언 후 변경 불가능. 그러나 [1, 2]처럼 자료구조형으로 들어가 있는 값은 변경 가능.
- 변경 불가능의 예시
- 자료구조 속 값은 변경 가능.


☞형 변환에는 명시적, 암묵적이 있다.
-‘명시적’이라는건 list(x)처럼 x를 list형으로 바꿔달라고 대놓고 말하는 것.
  원래 str(문자열)형이었던 456값이 정수형으로 변환되며 정수형인 123과 더하는게 가능했던 것. 더하고 난 뒤 해당 변수의 자료형도 정수형이다.
  그러나 이 경우에서는 str 자료형을 갖는 값이 456이 아닌 말 그대로 <문자 그 자체>인 abc이기 때문에 정수형으로 변환하는 것이 불가능하다.

-‘암묵적’은 자동으로 변환되는 것. 보통 크기가 더 큰 타입의 자료형으로 바뀐다.
->정수와 실수를 더한 뒤 그 값의 자료형을 확인해 보면 정수보다 실수가 더 크기 때문에 데이터 타입이 실수형으로 자동 변환되어 출력.


☞print()
-화면에 데이터를 출력하기 위한 함수.
-print(값, 값, 값, sep=’*’)이라고 쓴다면 값들 사이에 *가 껴서 나옴. -> 값*값*값
-print(값, 값, 값, end=’*’)이라고 쓴다면 값들이 다 출력되고 맨 마지막에 *가 붙어서 나옴. -> 값 값 값* (공백 없이 붙어서 나온다.)
-sep와 end를 동시에 적어서 출력하는 것이 가능하다.


☞set
-고유한(중복되지 않은) 아이템들의 정렬되지 않은 모음. 
-선언은 {} 내부에 쉼표로 나열.
-인덱스로 접근 불가!
-변경 가능한 아이템(list 같은 것.)은 아이템 값으로 가질 수 없다.
but, 아이템을 추가하거나 제거는 가능함.

-a={5, 2, 1, 4, 3}인 경우, print(a)를 해보면 {1, 2, 3, 4, 5}가 된다. 값이 순서대로 정렬된다. print(type(a))를 하면 set 형식이라고 알려준다.
-set을 쓴 후 .을 이용하면 add(), update(), discard(), remove() 등 여러 기능을 사용할 수 있다. (같은 값이 추가돼도 중복입력되진 않음.)


add()는 한 가지 아이템만 추가 가능.(list는 불가능)


update()는 여러 가지 아이템을 모두 추가 가능.(list, set 모두 가능!)
- update에는 모두 가능.
	discard()는 지우려는 대상이 존재하지 않아도 오류 발생하지 않음.
- set 아이템 중에 7이 없는데도 오류 발생X.
	remove()는 지우려는 대상이 없으면 오류 발생.


☞dictionary
-key:value 형식으로 쓰며, 키를 검색했을 때 짝지어진 값을 출력해낸다.
-key나 value에 문자열을 써야 할 때에는 ‘ ’를 꼭 붙여 써야 한다.
-키와 값을 추가하고 싶을 때 dict[‘키’] = ‘값’을 입력하면 됨.
- dict 활용 예시


☞str.format()
-화면 출력을 편하게 할 수 있도록 만든 것. 문자열+입력한 값의 조합.
-{}을 이용하여 입력할 값을 문자열 내에 대입할 수 있다.
-인덱스를 이용하거나 키워드(문자열)를 매핑하는 것도 가능하다.


-변수의 값이 실수일 때 %3.2f라고 하면 소수점 기준으로 정수 부분은 3자리, 소수점 아래 부분은 2자리까지 값을 나타내겠다는 의미.(나머지 소수아래는 반올림/내림 함.)
-%d는 정수 부분만 나타내겠다는 의미.

- 여러 개의 변수 값을 받을거면 split()함수를 쓰자.
